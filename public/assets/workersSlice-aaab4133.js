import{o as y}from"./index-454c0a50.js";const s=y.injectEndpoints({endpoints:n=>({getWorkers:n.query({queryFn:async(e,t,a,o)=>{const i=(await o("/workers/")).data;return i==null||i.sort((u,d)=>u.name.localeCompare(d.name)),{data:i}},providesTags:e=>e?[...e.map(({_id:t})=>({type:"Workers",id:t})),{type:"Workers",id:"LIST"}]:[{type:"Workers",id:"LIST"}]}),getWorker:n.query({queryFn:async(e,t,a,o)=>({data:(await o(`/workers/${e}`)).data}),providesTags:(e,t,a)=>[{type:"Workers",id:a}]}),addWorker:n.mutation({query:e=>({url:"/workers/",method:"POST",body:{name:e}}),invalidatesTags:["Statistics"],async onQueryStarted(e,{dispatch:t,queryFulfilled:a}){try{const{data:o}=await a;t(s.util.updateQueryData("getWorkers",void 0,r=>{r.push(o)}))}catch(o){console.log("error adding worker, invalidating {Workers - LIST}",o),t(s.util.invalidateTags([{type:"Workers",id:"LIST"}]))}}}),setShiftTime:n.mutation({query:({shiftTime:e,workerId:t})=>({url:`/workers/${t}/set-shift-time`,method:"PATCH",body:{shiftTime:e}}),async onQueryStarted({shiftTime:e,workerId:t},{dispatch:a,queryFulfilled:o}){a(s.util.updateQueryData("getWorker",t,r=>{r.shiftTime=e})),a(s.util.updateQueryData("getWorkers",void 0,r=>{const i=r.find(u=>u._id===t);i&&(i.shiftTime=e)}));try{await o}catch(r){console.log("error toggle lock, invalidating {Workers - workerId}",r),a(s.util.invalidateTags([{type:"Workers",id:t}]))}}}),resetShiftTimes:n.mutation({query:()=>({url:"/workers/reset-shift-times",method:"PATCH"}),invalidatesTags:["Workers"],async onQueryStarted(e,{dispatch:t,queryFulfilled:a}){t(s.util.updateQueryData("getWorkers",void 0,o=>{o.forEach(r=>r.shiftTime="")}));try{await a}catch(o){console.log("error toggle lock, invalidating {Workers - LIST}",o),t(s.util.invalidateTags([{type:"Workers",id:"LIST"}]))}}}),saveWorker:n.mutation({query:({workerDetails:e,workerId:t})=>({url:`/workers/${t}/save`,method:"POST",body:e}),invalidatesTags:["Statistics"],async onQueryStarted({workerDetails:e,workerId:t},{dispatch:a,queryFulfilled:o}){a(s.util.updateQueryData("getWorker",t,r=>{r.name=e.name,r.shiftTime=e.shiftTime,r.ownerId=e.ownerId})),a(s.util.updateQueryData("getWorkers",void 0,r=>{const i=r.findIndex(u=>u._id===e._id);e.ownerId===null?r.splice(i,1):(r[i].shiftTime=e.shiftTime,r[i].name=e.name)}));try{await o}catch(r){console.log("error save, invalidating {Workers - workerId}",r),a(s.util.invalidateTags([{type:"Workers",id:t}]))}}}),deleteWorker:n.mutation({query:e=>({url:`/posts/${e}`,method:"DELETE"}),invalidatesTags:(e,t,a)=>[{type:"Workers",id:a},{type:"Workers",id:"LIST"},{type:"Statistics"}]})}),overrideExisting:!1}),{useAddWorkerMutation:m,useDeleteWorkerMutation:g,useGetWorkerQuery:k,useGetWorkersQuery:W,useSaveWorkerMutation:c,useSetShiftTimeMutation:T,useResetShiftTimesMutation:p}=s;export{m as a,T as b,p as c,k as d,c as e,W as u};
