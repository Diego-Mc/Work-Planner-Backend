import{n as e}from"./index-f9649d7c.js";const t=e.injectEndpoints({endpoints:e=>({getWorkers:e.query({queryFn:async(e,t,r,i)=>{const a=(await i("/workers/")).data;return a?.sort(((e,t)=>e.name.localeCompare(t.name))),{data:a}},providesTags:e=>e?[...e.map((({_id:e})=>({type:"Workers",id:e}))),{type:"Workers",id:"LIST"}]:[{type:"Workers",id:"LIST"}]}),getWorker:e.query({queryFn:async(e,t,r,i)=>({data:(await i(`/workers/${e}`)).data}),providesTags:(e,t,r)=>[{type:"Workers",id:r}]}),addWorker:e.mutation({query:e=>({url:"/workers/",method:"POST",body:{name:e}}),invalidatesTags:["Statistics"],async onQueryStarted(e,{dispatch:r,queryFulfilled:i}){try{const{data:e}=await i;r(t.util.updateQueryData("getWorkers",void 0,(t=>{t.push(e)})))}catch(a){console.log("error adding worker, invalidating {Workers - LIST}",a),r(t.util.invalidateTags([{type:"Workers",id:"LIST"}]))}}}),setShiftTime:e.mutation({query:({shiftTime:e,workerId:t})=>({url:`/workers/${t}/set-shift-time`,method:"PATCH",body:{shiftTime:e}}),async onQueryStarted({shiftTime:e,workerId:r},{dispatch:i,queryFulfilled:a}){i(t.util.updateQueryData("getWorker",r,(t=>{t.shiftTime=e}))),i(t.util.updateQueryData("getWorkers",void 0,(t=>{const i=t.find((e=>e._id===r));i&&(i.shiftTime=e)})));try{await a}catch(s){console.log("error toggle lock, invalidating {Workers - workerId}",s),i(t.util.invalidateTags([{type:"Workers",id:r}]))}}}),resetShiftTimes:e.mutation({query:()=>({url:"/workers/reset-shift-times",method:"PATCH"}),invalidatesTags:["Workers"],async onQueryStarted(e,{dispatch:r,queryFulfilled:i}){r(t.util.updateQueryData("getWorkers",void 0,(e=>{e.forEach((e=>e.shiftTime=""))})));try{await i}catch(a){console.log("error toggle lock, invalidating {Workers - LIST}",a),r(t.util.invalidateTags([{type:"Workers",id:"LIST"}]))}}}),saveWorker:e.mutation({query:({workerDetails:e,workerId:t})=>({url:`/workers/${t}/save`,method:"POST",body:e}),invalidatesTags:["Statistics"],async onQueryStarted({workerDetails:e,workerId:r},{dispatch:i,queryFulfilled:a}){i(t.util.updateQueryData("getWorker",r,(t=>{t.name=e.name,t.shiftTime=e.shiftTime,t.ownerId=e.ownerId}))),i(t.util.updateQueryData("getWorkers",void 0,(t=>{const r=t.findIndex((t=>t._id===e._id));null===e.ownerId?t.splice(r,1):(t[r].shiftTime=e.shiftTime,t[r].name=e.name)})));try{await a}catch(s){console.log("error save, invalidating {Workers - workerId}",s),i(t.util.invalidateTags([{type:"Workers",id:r}]))}}}),deleteWorker:e.mutation({query:e=>({url:`/posts/${e}`,method:"DELETE"}),invalidatesTags:(e,t,r)=>[{type:"Workers",id:r},{type:"Workers",id:"LIST"},{type:"Statistics"}]})}),overrideExisting:!1}),{useAddWorkerMutation:r,useDeleteWorkerMutation:i,useGetWorkerQuery:a,useGetWorkersQuery:s,useSaveWorkerMutation:o,useSetShiftTimeMutation:d,useResetShiftTimesMutation:n}=t;export{r as a,d as b,n as c,a as d,o as e,s as u};
